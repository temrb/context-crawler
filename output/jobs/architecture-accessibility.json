[
  {
    "title": "Architecture: Accessibility | Next.js",
    "url": "https://nextjs.org/docs/architecture/accessibility",
    "html": "Next.js Docs\nArchitecture\nAccessibility\nCopy page\nAccessibility\n\nThe Next.js team is committed to making Next.js accessible to all developers (and their end-users). By adding accessibility features to Next.js by default, we aim to make the Web more inclusive for everyone.\n\nRoute Announcements\n\nWhen transitioning between pages rendered on the server (e.g. using the <a href> tag) screen readers and other assistive technology announce the page title when the page loads so that users understand that the page has changed.\n\nIn addition to traditional page navigations, Next.js also supports client-side transitions for improved performance (using next/link). To ensure that client-side transitions are also announced to assistive technology, Next.js includes a route announcer by default.\n\nThe Next.js route announcer looks for the page name to announce by first inspecting document.title, then the <h1> element, and finally the URL pathname. For the most accessible user experience, ensure that each page in your application has a unique and descriptive title.\n\nLinting\n\nNext.js provides an integrated ESLint experience out of the box, including custom rules for Next.js. By default, Next.js includes eslint-plugin-jsx-a11y to help catch accessibility issues early, including warning on:\n\naria-props\naria-proptypes\naria-unsupported-elements\nrole-has-required-aria-props\nrole-supports-aria-props\n\nFor example, this plugin helps ensure you add alt text to img tags, use correct aria-* attributes, use correct role attributes, and more.\n\nAccessibility Resources\nWebAIM WCAG checklist\nWCAG 2.2 Guidelines\nThe A11y Project\nCheck color contrast ratios\n between foreground and background elements\nUse prefers-reduced-motion\n when working with animations\nPrevious\nArchitecture\nNext\nFast Refresh\n\nWas this helpful?\n\nsupported.\nSend"
  }
]