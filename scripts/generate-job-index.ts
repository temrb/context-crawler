#!/usr/bin/env bun

import { readdirSync, writeFileSync } from 'fs';
import { join } from 'path';

const JOBS_DIR = join(process.cwd(), 'configurations', 'jobs');
const CONFIGURATIONS_DIR = join(process.cwd(), 'configurations');
const OUTPUT_FILE = join(CONFIGURATIONS_DIR, 'index.ts');

/**
 * Converts a kebab-case filename to camelCase for use as a variable name.
 * Examples:
 *   - ai-sdk ‚Üí aiSdk
 *   - next-js-16 ‚Üí nextJs16
 *   - prisma ‚Üí prisma
 */
function toCamelCase(filename: string): string {
	return filename.replace(/-([a-z0-9])/g, (_, char) => char.toUpperCase());
}

/**
 * Determines if a registry key needs quotes.
 * Single-word identifiers don't need quotes, hyphenated ones do.
 */
function needsQuotes(key: string): boolean {
	return key.includes('-');
}

/**
 * Scans the jobs directory and generates the index.ts file.
 */
function generateJobIndex(): void {
	console.log('üîç Scanning configurations/jobs/ directory...');

	// Read all .ts files except index.ts and types.ts
	const files = readdirSync(JOBS_DIR)
		.filter((file) => {
			return (
				file.endsWith('.ts') && file !== 'index.ts' && file !== 'types.ts'
			);
		})
		.sort(); // Alphabetical order

	if (files.length === 0) {
		console.warn('‚ö†Ô∏è  No job files found in configurations/jobs/');
		return;
	}

	console.log(`‚úÖ Found ${files.length} job file(s):`);
	files.forEach((file) => console.log(`   - ${file}`));

	// Generate imports and registry entries
	const imports: string[] = [];
	const registryEntries: string[] = [];

	for (const file of files) {
		const basename = file.replace('.ts', '');
		const camelName = toCamelCase(basename);
		const registryKey = basename;

		// Import statement (from jobs/ subdirectory)
		imports.push(`import ${camelName} from './jobs/${basename}.js';`);

		// Registry entry
		if (needsQuotes(registryKey)) {
			registryEntries.push(`\t'${registryKey}': ${camelName},`);
		} else {
			registryEntries.push(`\t${registryKey},`);
		}
	}

	// Generate the full file content
	const content = `// AUTO-GENERATED - DO NOT EDIT
// Generated by scripts/generate-job-index.ts
// Run 'bun run generate:jobs' to regenerate this file

import type { JobTasks } from './types.js';

${imports.join('\n')}

/**
 * Registry of all available crawl jobs.
 * Each job contains one or more tasks (crawl configurations).
 */
export const jobs = {
${registryEntries.join('\n')}
} satisfies Record<string, JobTasks>;

export type JobRegistry = typeof jobs;
`;

	// Write to file
	writeFileSync(OUTPUT_FILE, content, 'utf-8');
	console.log(`\n‚ú® Generated configurations/index.ts`);
	console.log(`   Jobs registered: ${files.map((f) => f.replace('.ts', '')).join(', ')}`);
}

// Run the generator
try {
	generateJobIndex();
} catch (error) {
	console.error('‚ùå Error generating job index:', error);
	process.exit(1);
}
